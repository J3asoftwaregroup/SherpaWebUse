package com.j3a.assurance.reporting.design;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.Date;

import org.apache.log4j.Logger;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.lowagie.text.Cell;

public class AttestationDesign {
	private static int compteur;
	private static Logger logger = Logger
			.getLogger(ConditionsParticulieresDesign.class);

	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font libFont = new Font(Font.FontFamily.TIMES_ROMAN, 14,
			Font.BOLD);
	private static Font textFont = new Font(Font.FontFamily.TIMES_ROMAN, 14,
			Font.ITALIC);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLDITALIC, BaseColor.RED);
	private AttestationReportFactory attestationFactory;

	private String attestationId;

	public void CreerRapport() {
		File dir = new File("c:/reports/attestations");
		dir.mkdirs();	
		try {
			// On instancie le nouveau "Document"
			Document docPdf = new Document();
			// On instancie le nouveau "PdfWriter"
			PdfWriter writer = PdfWriter.getInstance(docPdf,
					new FileOutputStream("c:/reports/attestations/Attestation_" + compteur
							+ ".pdf"));

			// On ouvre notre "Document"
			docPdf.open();
			// on ajoute les metadonnées
			ajoutMetaDonnees(docPdf);
			// ajout un titre au document
			ajoutTitre(docPdf);
			// ajout du contenu au document
			ajoutContenu(docPdf);

			docPdf.close();
			logger.info("Attestation générée");
			compteur = compteur + 1;
		} catch (FileNotFoundException | DocumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("erreur de génération de l'attestation");
		}
	}

	private static void ajoutMetaDonnees(Document document) {
		document.addTitle("Attestation");
		document.addSubject("Attestation de Véhicule");
		document.addKeywords("Attestation, PDF");
		document.addAuthor("J3A SOFTWARE GROUP");
		document.addCreator("J3A SOFTWARE GROUP");
	}

	private static void ajoutTitre(Document document) throws DocumentException {
		Anchor anchor = new Anchor("J3A SOFTWARE GROUP");
		anchor.setReference("http://www.j3asoftwaregroup.com/");
		anchor.setName("website");

		Paragraph titre = new Paragraph();

		/****** ajout d'un paragraphe de texte au titre ********/
		Paragraph paragraph = new Paragraph("" + anchor, smallBold);
		paragraph.setAlignment(Element.ALIGN_CENTER);
		titre.add(paragraph);

		// Will create: Report generated by: _name, _date
		paragraph = new Paragraph("Rapport généré par: "
				+ System.getProperty("user.name") + ", le : " + new Date(),
				smallBold);
		paragraph.setAlignment(Element.ALIGN_CENTER);
		titre.add(paragraph);

		ajoutLigneVide(titre, 8);
		// ajout du titre au document
		document.add(titre);
	}

	public void ajoutContenu(Document document) throws DocumentException {

		// Second parameter is the number of the chapter
		Chapter chapter = new Chapter(new Paragraph(), 0);
		// chapter.setNumberDepth(0);

		Paragraph prg = new Paragraph("Attestation", subFont);
		prg.setAlignment(Element.ALIGN_CENTER);
		Section section = chapter.addSection(prg);
		section.setNumberDepth(0);
		ajoutLigneVide(prg, 3);

		// ajouter une table
		this.createTable(section);

		// ajoute la session au document
		document.add(section);

	}

	private static void ajoutLigneVide(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	public void createTable(Section section) throws BadElementException {
		try {
			// on passe l'id de l'attestation à la classe attestationFactory
			getAttestationFactory().setIdAttestation(getAttestationId());
			AttestationReport reportField = getAttestationFactory()
					.getAttestationReports();
			System.out.println("getAttestationFactory().getIdAttestation()"
					+ getAttestationFactory().getIdAttestation());
			PdfPTable table = new PdfPTable(4);

			/*************** edition du style des cellules **********************/
			table.getDefaultCell().setBackgroundColor(BaseColor.PINK);
			table.getDefaultCell().setBorder(Cell.NO_BORDER);

			/*************** edition des champs du formulaire **********************/
			table.addCell(new Phrase("Nom", libFont));
			table.addCell(new Phrase(reportField.getNom(), textFont));

			table.addCell(new Phrase("Prenom", libFont));
			table.addCell(new Phrase(reportField.getPrenom(), textFont));

			table.addCell(new Phrase("Profession", libFont));
			table.addCell(new Phrase(reportField.getProfession(), textFont));

			table.addCell(new Phrase("Police", libFont));
			table.addCell(new Phrase(reportField.getPolice(), textFont));

			table.addCell(new Phrase("Date", libFont));
			table.addCell(new Phrase("" + new Date(), textFont));

			table.addCell(new Phrase("Véhicule(genre)", libFont));
			table.addCell(new Phrase(reportField.getGenre(), textFont));

			table.addCell(new Phrase("Marque", libFont));
			table.addCell(new Phrase(reportField.getMarque(), textFont));

			table.addCell(new Phrase("Immatriculation", libFont));
			table.addCell(new Phrase(reportField.getImmatriculation(), textFont));

			// table.setHeaderRows(1);
			section.add(table);
			logger.info("paramètres renseignés avec succès: Attestation bien construit");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			logger.error("la requète ne renvoit aucune données");
			System.out.println("la requète renvoie nul");
			e.printStackTrace();
		}

	}

	public AttestationReportFactory getAttestationFactory() {
		return attestationFactory;
	}

	public void setAttestationFactory(
			AttestationReportFactory attestationFactory) {
		this.attestationFactory = attestationFactory;
	}

	public String getAttestationId() {
		return attestationId;
	}

	public void setAttestationId(String attestationId) {
		this.attestationId = attestationId;
	}

}
